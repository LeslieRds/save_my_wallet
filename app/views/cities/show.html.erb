<div class="wrap-game-container">
    <% if City.where(user_id: current_user).empty? %>
      <div class="container-text">
        <div class="justify-content">
          <h1>Welcome to your city</h1>
          <p>You haven't created your city yet!</p>
          <%= link_to "Create your city", new_city_path, class:"button-add"%>
        </div>
      </div>
    <% else %>

  <div class="city-container">
    <script>


    function fetchdata() {
      const buildingId = fetch('/expenses/json_expenses', {
        headers: {
          'Accept': 'application/json'
        }
      })
      .then(response => response.json())
      .then((data) => {
        // get all building_id
        const buildingIds =[... new Set(data.map((expense) => expense.building_id))];
        console.log(buildingIds)
        return buildingIds;
      });

    const photoUrl =
      fetch('/buildings', {
        headers: {
          'Accept': 'application/json'
        }
      })
      .then(response => response.json())
      .then((data) => {
        return data
      });

      return Promise.all([buildingId, photoUrl])
      .then(([buildings, photos]) => {
        let buildingsWithPhotos = {};
        photos.forEach((photo) => {
          const building = buildings.find((id) => id === photo.id);
          if (building) {
            buildingsWithPhotos[photo.category] = [building, photo.photo_id, photo.level];
          }
        });
        console.log(buildingsWithPhotos)
        return buildingsWithPhotos;
    });
  }



    class MyScene extends Phaser.Scene {

      constructor (config)
      {
        super(config);
      }

      init (data) {
        this.data = data;
      }


    preload ()
    {
      const dataPhoto = this.data.data


      //littlePig

      this.load.image('piggy', 'https://res.cloudinary.com/dgyeheb95/image/upload/v1688546467/littlepig_akphfx.png' )
      //Background image
      this.load.image('background', 'https://res.cloudinary.com/dgyeheb95/image/upload/v1688389322/background_lkij73.jpg');


      dataPhoto.then((result) => {
        console.log(result)
        this.load.image('food', result['food'][1]);
        this.load.image('shopping', result['shopping'][1]);
        this.load.image('health', result['health'][1]);
        this.load.image('income', result['income'][1]);
        this.load.image('hobbies', result['hobbies'][1]);
        this.load.image('regular-expenses', result['regular-expenses'][1]);
        this.load.image('travel', result['travel'][1]);
      })
    }

    create ()
    {
      //Background image
      const backgroundImage = this.add.image(180, 365, 'background');
      backgroundImage.setDisplaySize(this.sys.game.config.width, this.sys.game.config.height);

      // piggy
      const piggy = this.add.sprite(200, 650, 'piggy');
      piggy.setDisplaySize(80, 80);

      this.tweens.add({
        targets: piggy,
        y: 610,
        duration: 400,
        yoyo: true,
        loop: -1
      });

      piggy.setInteractive();
      this.input.setDraggable(piggy);
      piggy.on('drag', function (pointer, dragX, dragY) {
        this.x = dragX;
        this.y = dragY;
      });
      piggy.dragDistanceThreshold = 0;
      piggy.on('dragstart', function (pointer) {
        this.setDepth(1);
      });

    const data = this.data.data;
    data.then((result) => {
      console.log(result);
      // Food
      const food = this.add.sprite(225, 450, 'food');
      food.setDisplaySize(100, 80);
      food.setInteractive();
      this.popUp(food, result['food'][2], 'food');
      const shopping = this.add.sprite(160, 300, 'shopping')
      shopping.setDisplaySize(100, 80);
      shopping.setInteractive();
      this.popUp(shopping, result['shopping'][2], 'shopping');
      const health = this.add.sprite(75, 220, 'health')
      health.setDisplaySize(100, 80);
      health.setInteractive();
      this.popUp(health, result['health'][2], 'health');
      const income = this.add.sprite(290, 220, 'income')
      income.setDisplaySize(120, 100);
      income.setInteractive();
      this.popUp(income, result['income'][2], 'income');
      const hobbies = this.add.sprite(290, 550, 'hobbies')
      hobbies.setDisplaySize(100, 80);
      hobbies.setInteractive();
      this.popUp(hobbies, result['hobbies'][2], 'hobbies');
      const regularExpenses = this.add.sprite(90, 550, 'regular-expenses')
      regularExpenses.setDisplaySize(100, 80);
      regularExpenses.setInteractive();
      this.popUp(regularExpenses, result['regular-expenses'][2], 'regular-expenses');
      const travel = this.add.sprite(225, 65, 'travel')
      travel.setDisplaySize(100, 80);
      travel.setInteractive();
      this.popUp(travel, result['travel'][2], 'travel');
    });
  }

  popUp(sprite, level, category) {
    const popupText = this.add.text(0, 0, '', {
      fontFamily: 'Arial',
      fontSize: 16,
      backgroundColor: 'rgba(241, 149, 132, 0.9)',
      padding: {
        x: 5,
        y: 5,
      },
    });
    popupText.setVisible(false);

    sprite.on('pointerover', function () {
      const offsetX = -30;
      const offsetY = -60;
      const x = sprite.x + offsetX;
      const y = sprite.y + offsetY;
      popupText.setText(`level ${level}`);
      popupText.setColor('#29AACD');
      popupText.setPosition(x, y);
      popupText.setVisible(true);
    });

    sprite.on('pointerout', function () {
      popupText.setVisible(false);
    });
  }

  update() {}
}


  const config = {
    type: Phaser.AUTO,
    width: 360,
    height: 730,
    physics: {
      default: 'arcade',
      arcade: {
        gravity: { y: 10 },
      }
    },
    };
    const data = fetchdata();
    const game = new Phaser.Game(config);
    game.scene.add('myScene', MyScene, true, {data: data});
    game.scene.start();
    const el = document.body.querySelector(".city-container");
    el.appendChild(game.canvas);

  </script>

          <%= link_to "?", help_path, class: "button-help text-decoration-none" %>

        <div class="city-bar">
          <div class="progress progress-top" style="height: 10px;">
            <div class="progress-bar progress-bar-striped progress-bar-animated bg-food" role="progressbar" style="width: <%=  @expenses["food"].fdiv(@total_category['food']) * 100 %>%" aria-valuenow=" <%=  @expenses["food"].fdiv(@total_category['food']) * 100 %>" aria-valuemin="0" aria-valuemax="100"><i class="fa-solid fa-utensils icon"></i></div>
          </div>
          <div class="progress" style="height: 10px;">
            <div class="progress-bar progress-bar-striped progress-bar-animated bg-shopping" role="progressbar" style="width:  <%=  @expenses["shopping"].fdiv(@total_category['shopping']) * 100 %>%" aria-valuenow="<%=  @expenses["shopping"].fdiv(@total_category['shopping']) * 100 %>" aria-valuemin="0" aria-valuemax="100"><i class="fa-solid fa-shopping-bag icon"></i></div>
          </div>
          <div class="progress" style="height: 10px;">
            <div class="progress-bar progress-bar-striped progress-bar-animated bg-hobbies" role="progressbar" style="width: <%=  @expenses["hobbies"].fdiv(@total_category['hobbies']) * 100 %>%" aria-valuenow="<%=  @expenses["hobbies"].fdiv(@total_category['hobbies']) * 100 %>" aria-valuemin="0" aria-valuemax="100"><i class="fa-solid fa-gamepad icon"></i></div>
          </div>
          <div class="progress" style="height: 10px;">
            <div class="progress-bar progress-bar-striped progress-bar-animated bg-health" role="progressbar" style="width: <%=  @expenses["health"].fdiv(@total_category['health']) * 100 %>%" aria-valuenow="<%=  @expenses["health"].fdiv(@total_category['health']) * 100 %>" aria-valuemin="0" aria-valuemax="100"><i class="fa-solid fa-heartbeat icon"></i></div>
          </div>
          <div class="progress" style="height: 10px;">
            <div class="progress-bar progress-bar-striped progress-bar-animated bg-travel" role="progressbar" style="width: <%=  @expenses["travel"].fdiv(@total_category['travel']) * 100 %>%" aria-valuenow="<%=  @expenses["travel"].fdiv(@total_category['travel']) * 100 %>" aria-valuemin="0" aria-valuemax="100"><i class="fa-solid fa-plane icon"></i></div>
          </div>
        </div>
      </div>
    <% end %>
</div>
